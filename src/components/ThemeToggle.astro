---
import SunIcon from "../icons/Sun.astro"
import MoonIcon from "../icons/Moon.astro"
import SystemIcon from "../icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {THEMES.map((theme) => (
        <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
          {theme}
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)")
  const themesMenu = document.getElementById("themes-menu")
  let remove = null

  const getThemePreference = () => {
    // Intentamos obtener el tema guardado desde localStorage
    const storedTheme = localStorage.getItem("theme");
    if (storedTheme) {
      console.log('Theme from localStorage:', storedTheme);
      return storedTheme;
    }

    // Si no hay tema guardado, detectamos la preferencia del sistema
    return matchMedia.matches ? "dark" : "light";
  }

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0"
    })
  }

  const updateTheme = () => {
    console.log('Updating theme...');

    // Limpiar cualquier evento anterior
    if (remove != null) {
      remove();
    }

    // Añadir el evento para actualizar el tema si cambia la preferencia del sistema
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    }

    const themePreference = getThemePreference();
    console.log('Current theme preference:', themePreference);
    
    const isDark = themePreference === "dark" || (themePreference === "system" && matchMedia.matches);

    // Actualizamos los iconos para que coincidan con el tema
    updateIcon(themePreference);

    // Aplicamos la clase 'dark' al documento si es el tema oscuro
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    console.log('Dark class added:', document.documentElement.classList.contains('dark'));

    // Guardamos la preferencia del tema en localStorage
    localStorage.setItem("theme", themePreference);
  };

  // Actualiza el tema al cargar la página
  updateTheme();

  // Ocultar el menú de temas al hacer clic fuera de él
  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  // Mostrar el menú de selección de temas cuando se hace clic en el botón
  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    console.log('Theme toggle button clicked');
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  // Manejar la selección de un tema del menú
  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      const selectedTheme = e.target.innerText.toLowerCase().trim();
      localStorage.setItem("theme", selectedTheme); // Guardar la preferencia seleccionada
      updateTheme(); // Aplicar el nuevo tema
      console.log('Theme set to:', selectedTheme); // Registro de depuración
    });
  });

  // Asegurarse de que el tema se actualice después de cualquier cambio de Astro
  document.addEventListener('astro:after-swap', () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
  });
</script>
